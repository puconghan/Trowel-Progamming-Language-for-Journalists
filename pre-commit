#! /usr/bin/python

# Git pre-commit hook
#
# Installation instructions:
# Symbolically link this file to .git/hooks with `cd .git/hooks; ln -s ../../pre-commit pre-commit'

import os, sys, unittest
if os.getcwd().split('/')[-1] == 'hooks':
	os.chdir('../..')
sys.path.append(os.getcwd())
from epicparser import *
from glob import glob
from trowelfunctions import *


class TestTrowel(unittest.TestCase):


	# Lexer tests
	
	# Declaration tests
	def test_lexer_declaration_number(self):
		self.assertEqual(parsewrapper().gettokens("number variablename"), [['NUMBER', 'number', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_text(self):
		self.assertEqual(parsewrapper().gettokens("text variablename"), [['TEXT', 'text', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_url(self):
		self.assertEqual(parsewrapper().gettokens("url variablename"), [['URL', 'url', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_numblist(self):
		self.assertEqual(parsewrapper().gettokens("numlist variablename"), [['NUMLIST', 'numlist', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_textlist(self):
		self.assertEqual(parsewrapper().gettokens("textlist variablename"), [['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_urllist(self):
		self.assertEqual(parsewrapper().gettokens("urllist variablename"), [['URLLIST', 'urllist', 1], ['UNKNOWNWORD', 'variablename', 1]])
	
	
	# Print tests
	def test_lexer_print_number(self):
		self.assertEqual(parsewrapper().gettokens("print 45"), [['UNKNOWNWORD', 'print', 1], ['NUMVAL', '45', 1]])
		self.assertEqual(parsewrapper().gettokens("print 4 5"), [['UNKNOWNWORD', 'print', 1], ['NUMVAL', '4', 1], ['NUMVAL', '5', 1]])

	def test_lexer_print_url(self):
		self.assertEqual(parsewrapper().gettokens("print 'This is a url'"), [['UNKNOWNWORD', 'print', 1], ['URLVAL', '\'This is a url\'', 1]])

	def test_lexer_print_text(self):
		self.assertEqual(parsewrapper().gettokens("print \"this is a text\""), [['UNKNOWNWORD', 'print', 1], ['TEXTVAL', '"this is a text"', 1]])

	# Read tests

	def test_lexer_save(self):
		self.assertEqual(parsewrapper().gettokens("save \"this is text\" into \"file.txt\""), [['UNKNOWNWORD', 'save', 1], ['TEXTVAL', '"this is text"', 1], ['UNKNOWNWORD', 'into', 1], ['TEXTVAL', '"file.txt"', 1]])
		

	#Error checking Lexer tests
	# Print tests
	def test_lexer_print_variable_Error(self):
		self.assertEqual(parsewrapper().gettokens("print x"), [['UNKNOWNWORD', 'print', 1], ['UNKNOWNWORD', 'x', 1]])
		
		
		

	# Parser tests
	def test_parser_print_number(self):
		self.assertEqual(parsewrapper().getabstractlist("print 45"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 45]]]]]]])
		self.assertEqual(parsewrapper().getabstractlist("print 4 5"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]]]]]])
		
	def test_parser_print_text(self):
		self.assertEqual(parsewrapper().getabstractlist("print \"this is text\""), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['text', 'this is text']]]]]]])
		
	def test_parser_print_url(self):
		self.assertEqual(parsewrapper().getabstractlist("print 'this is a url'"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['url', 'this is a url']]]]]]])
	
		
	
	# Function tests
	def test_function_printlist(self):
		self.assertEqual(r_printlist([['this','is','a','list'],['url.com']]), 1)

	def test_function_printvars(self):
		self.assertEqual(r_printvars(['var1',"var2",3]), 1)

	def test_function_print(self):
		self.assertEqual(r_print([1, 2, 3, 4]), 1)
		self.assertEqual(r_print(["this", "is", "a", "test"]), 1)
		self.assertEqual(r_print(["www.cnn.com", "www.bbc.com", "www.reuters.com", "www.huffpost.com"]), 1)
		self.assertEqual(r_print([["www.cnn.com", "www.bbc.com"], ["www.reuters.com", "www.huffpost.com"]]), 1)
		self.assertEqual(r_print([["this", "is"], ["a", "test"]]), 1)

	def test_function_combine(self):
		self.assertEqual(r_combine(['url.com', "with", 4]), 'url.com4')
		self.assertEqual(r_combine(['url.com', "with", "this is text"]), 'url.comthis is text')

	def test_function_length(self):
		self.assertEqual(r_length([['1','2','3','4']]), 4)
		self.assertEqual(r_length([[1,2,3,4]]), 4)
		self.assertEqual(r_length([["1","2","3","4"]]), 4)

	def test_function_insert(self):
		self.assertEqual(r_insert(["text","into",["text","list"]]), ["text","list","text"])
		self.assertEqual(r_insert([1,"into",[2,3]]), [2,3,1])
		self.assertEqual(r_insert([1,"into",[2,3], "extra arg"]), 0)

	def test_function_read(self):
		self.assertEqual(r_read(["read_test_file.txt"]), ['http://www.cnn.com', 'http://www.bbc.com', 'http://www.reuters.com', 'http://www.sina.com', 'http://www.ap.com'])

	def test_function_type_checking(self):
		self.assertEqual(isnumber(1), True)
		self.assertEqual(isnumber("string"), False)
		self.assertEqual(isurl('http://www.bbc.com'), True)
		self.assertEqual(isurl('cnn.com'), False)
		self.assertEqual(istext('text'), True)
		self.assertEqual(istext(1), False)
		self.assertEqual(isnumlist([1,2,3,4,5]), True)
		self.assertEqual(isnumlist(["this", "is", "a", "test"]), False)
		self.assertEqual(isurllist(['http://www.cnn.com', 'http://www.bbc.com']), True)
		self.assertEqual(isurllist(["this", "is", "not"]), False)
		self.assertEqual(istextlist(["this", "is", "a", "test"]), True)
		self.assertEqual(istextlist([1,2,3,4,5]), False)

if __name__ == '__main__':
	for f in glob ('*.pyc'):
   		os.unlink(f)
	unittest.main()