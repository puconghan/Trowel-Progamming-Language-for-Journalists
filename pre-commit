#! /usr/bin/python

# Git pre-commit hook
#
# Installation instructions:
# Symbolically link this file to .git/hooks with `cd .git/hooks; ln -s ../../pre-commit pre-commit'

import os, sys, unittest
if os.getcwd().split('/')[-1] == 'hooks':
	os.chdir('../..')
sys.path.append(os.getcwd())
from epicparser import *
from glob import glob
from trowelfunctions import *


class TestTrowel(unittest.TestCase):


	# Lexer tests
	
	# Declaration tests
	def test_lexer_declaration_number(self):
		self.assertEqual(parsewrapper().gettokens("number variablename"), [['NUMBER', 'number', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_text(self):
		self.assertEqual(parsewrapper().gettokens("text variablename"), [['TEXT', 'text', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_url(self):
		self.assertEqual(parsewrapper().gettokens("url variablename"), [['URL', 'url', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_numblist(self):
		self.assertEqual(parsewrapper().gettokens("numlist variablename"), [['NUMLIST', 'numlist', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_textlist(self):
		self.assertEqual(parsewrapper().gettokens("textlist variablename"), [['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	def test_lexer_declaration_urllist(self):
		self.assertEqual(parsewrapper().gettokens("urllist variablename"), [['URLLIST', 'urllist', 1], ['UNKNOWNWORD', 'variablename', 1]])
		
	
	# Print tests
	def test_lexer_print_number(self):
		self.assertEqual(parsewrapper().gettokens("print 45"), [['UNKNOWNWORD', 'print', 1], ['NUMVAL', '45', 1]])
		self.assertEqual(parsewrapper().gettokens("print 4 5"), [['UNKNOWNWORD', 'print', 1], ['NUMVAL', '4', 1], ['NUMVAL', '5', 1]])

	def test_lexer_print_url(self):
		self.assertEqual(parsewrapper().gettokens("print 'This is a url'"), [['UNKNOWNWORD', 'print', 1], ['URLVAL', '\'This is a url\'', 1]])

	def test_lexer_print_text(self):
		self.assertEqual(parsewrapper().gettokens("print \"this is a text\""), [['UNKNOWNWORD', 'print', 1], ['TEXTVAL', '"this is a text"', 1]])
		
	#Length tests
	def test_lexer_length_list(self):
		self.assertEqual(parsewrapper().gettokens("length of [4, 5, 6]"), [['UNKNOWNWORD', 'length', 1], ['UNKNOWNWORD', 'of', 1], ['LEFTSQUAREBRACKET', '[', 1], ['NUMVAL', '4', 1], ['COMMA', ',', 1], ['NUMVAL', '5', 1], ['COMMA', ',', 1], ['NUMVAL', '6', 1], ['RIGHTSQUAREBRACKET', ']', 1]])

	# Read and Save tests

	def test_lexer_save(self):
		self.assertEqual(parsewrapper().gettokens("save \"this is text\" into \"file.txt\""), [['UNKNOWNWORD', 'save', 1], ['TEXTVAL', '"this is text"', 1], ['UNKNOWNWORD', 'into', 1], ['TEXTVAL', '"file.txt"', 1]])
		
	def test_lexer_read(self):
		self.assertEqual(parsewrapper().gettokens("read \"file.txt\" into urllist"), [['UNKNOWNWORD', 'read', 1], ['TEXTVAL', '"file.txt"', 1], ['UNKNOWNWORD', 'into', 1], ['URLLIST', 'urllist', 1]])
		self.assertEqual(parsewrapper().gettokens("read \"file.txt\" into textlist"), [['UNKNOWNWORD', 'read', 1], ['TEXTVAL', '"file.txt"', 1], ['UNKNOWNWORD', 'into', 1], ['TEXTLIST', 'textlist', 1]])
		
	def test_lexer_append(self):
		self.assertEqual(parsewrapper().gettokens("append \"this is text\" into \"file.txt\""), [['UNKNOWNWORD', 'append', 1], ['TEXTVAL', '"this is text"', 1], ['UNKNOWNWORD', 'into', 1], ['TEXTVAL', '"file.txt"', 1]])
		
	# Find tests
	
	def test_lexer_findText(self):
		self.assertEqual(parsewrapper().gettokens("flighttime is findtext in space with \"time\" and \"flight\""), [['UNKNOWNWORD', 'flighttime', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findtext', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'space', 1], ['UNKNOWNWORD', 'with', 1], ['TEXTVAL', '"time"', 1], ['AND', 'and', 1], ['TEXTVAL', '"flight"', 1]])
	
	def test_lexer_findUrl(self):
		self.assertEqual(parsewrapper().gettokens("flighttime is findurl in space with \"time\" and \"flight\""), [['UNKNOWNWORD', 'flighttime', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findurl', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'space', 1], ['UNKNOWNWORD', 'with', 1], ['TEXTVAL', '"time"', 1], ['AND', 'and', 1], ['TEXTVAL', '"flight"', 1]])
		
	
	# Print tests
	def test_lexer_binop_(self):
		self.assertEqual(parsewrapper().gettokens("2 + 2"), [['NUMVAL', '2', 1], ['PLUS', '+', 1], ['NUMVAL', '2', 1]])
		self.assertEqual(parsewrapper().gettokens("2 + 2 - (4 * 5)"), [['NUMVAL', '2', 1], ['PLUS', '+', 1], ['NUMVAL', '2', 1], ['MINUS', '-', 1], ['LEFTPAREN', '(', 1], ['NUMVAL', '4', 1], ['MULTIPLY', '*', 1], ['NUMVAL', '5', 1], ['RIGHTPAREN', ')', 1]])
		self.assertEqual(parsewrapper().gettokens("2 + - 2"), [['NUMVAL', '2', 1], ['PLUS', '+', 1], ['MINUS', '-', 1], ['NUMVAL', '2', 1]])
		

	#Error checking Lexer tests
	# Print tests
	def test_lexer_print_variable_Error(self):
		self.assertEqual(parsewrapper().gettokens("print x"), [['UNKNOWNWORD', 'print', 1], ['UNKNOWNWORD', 'x', 1]])
		
		
		

	# Parser tests
	
	#print tests
	def test_parser_print_number(self):
		self.assertEqual(parsewrapper().getabstractlist("print 45"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 45]]]]]]])
		self.assertEqual(parsewrapper().getabstractlist("print 4 5"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]]]]]])
		
	def test_parser_print_text(self):
		self.assertEqual(parsewrapper().getabstractlist("print \"this is text\""), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['text', 'this is text']]]]]]])
		
	def test_parser_print_url(self):
		self.assertEqual(parsewrapper().getabstractlist("print 'this is a url'"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['url', 'this is a url']]]]]]])
		
	def test_parser_print_list(self):
		self.assertEqual(parsewrapper().getabstractlist("print [1,2,3]"), [['indentlevel', 0],
   ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['list', [['expression', ['value', ['number', 1]]], ['expression', ['value', ['number', 2]]], ['expression', ['value', ['number', 3]]]]]]]]]])
   		self.assertEqual(parsewrapper().getabstractlist("print [\"text\",\"2\",\"more text\"]"), [['indentlevel', 0],
   ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['list', [['expression', ['value', ['text', 'text']]], ['expression', ['value', ['text', '2']]], ['expression', ['value', ['text', 'more text']]]]]]]]]])
   
   #Length tests
	def test_lexer_length_list(self):
		self.assertEqual(parsewrapper().getabstractlist("length of [4, 5, 6]"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'length'], 'arguments', [['expression', ['insertword', 'of']], ['expression', ['list', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]], ['expression', ['value', ['number', 6]]]]]]]]]])
   
   #Save and Read tests
	
	def test_parser_save(self):
		self.assertEqual(parsewrapper().getabstractlist("save \"this is text\" into \"file.txt\""), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['value', ['text', 'this is text']]], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'file.txt']]]]]]])
		
	def test_parser_append(self):
		self.assertEqual(parsewrapper().getabstractlist("append \"this is text\" into \"file.txt\""), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'append'], 'arguments', [['expression', ['value', ['text', 'this is text']]], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'file.txt']]]]]]])
		
	#Binop tests
	
	def test_lexer_binop_(self):
		self.assertEqual(parsewrapper().getabstractlist("2 + 2"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'plus'], 'arguments', [['expression', ['value', ['number', 2]]], ['expression', ['value', ['number', 2]]]]]]])
		self.assertEqual(parsewrapper().getabstractlist("2 + 2 - (4 * 5)"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'minus'], 'arguments', [['expression', ['functioncall', ['functionname', 'plus'], 'arguments', [['expression', ['value', ['number', 2]]], ['expression', ['value', ['number', 2]]]]]], ['expression', ['functioncall', ['functionname', 'multiply'], 'arguments', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]]]]]]]]])
		self.assertEqual(parsewrapper().getabstractlist("2 + - 2"), [['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'plus'], 'arguments', [['expression', ['value', ['number', 2]]], ['expression', ['value', ['number', -2]]]]]]])
	
	# Function tests
	
	def test_function_arithmetic(self):
		self.assertEqual(r_plus([2, 3]), 5)
		self.assertEqual(r_plus([2, 71]), 73)
		self.assertEqual(r_minus([2, 71]), -69)
		self.assertEqual(r_minus([14, 6]), 8)
		self.assertEqual(r_multiply([2, 6]), 12)
		self.assertEqual(r_multiply([4, 7]), 28)
		self.assertEqual(r_divide([7, 4]), 2)
		self.assertEqual(r_divide([20, 5]), 4)
		self.assertEqual(r_divide([27, 5]), 5)
		
	def test_function_relop(self):
		self.assertEqual(r_greater([2,3]), False);
		self.assertEqual(r_greater([12, 5]), True);
		self.assertEqual(r_less([12, 5]), False);
		self.assertEqual(r_less([5, 10]), True);
		self.assertEqual(r_equal([12, 5]), False);
		self.assertEqual(r_equal([5, 5]), True);
		self.assertEqual(r_notequal([12, 5]), True);
		self.assertEqual(r_notequal([5, 5]), False);
		
	def test_function_printlist(self):
		self.assertEqual(r_printlist([['this','is','a','list'],['url.com']]), 1)

	def test_function_printvars(self):
		self.assertEqual(r_printvars(['var1',"var2",3]), 1)

	def test_function_print(self):
		self.assertEqual(r_print([1, 2, 3, 4]), 1)
		self.assertEqual(r_print(["this", "is", "a", "test"]), 1)
		self.assertEqual(r_print(["www.cnn.com", "www.bbc.com", "www.reuters.com", "www.huffpost.com"]), 1)
		self.assertEqual(r_print([["www.cnn.com", "www.bbc.com"], ["www.reuters.com", "www.huffpost.com"]]), 1)
		self.assertEqual(r_print([["this", "is"], ["a", "test"]]), 1)

	def test_function_combine(self):
		self.assertEqual(r_combine(['url.com', "with", 4]), 'url.com4')
		self.assertEqual(r_combine(['url.com', "with", "this is text"]), 'url.comthis is text')

	def test_function_length(self):
		self.assertEqual(r_length([['1','2','3','4']]), 4)
		self.assertEqual(r_length([[1,2,3,4]]), 4)
		self.assertEqual(r_length([["1","2","3","4"]]), 4)

	def test_function_insert(self):
		self.assertEqual(r_insert(["text","into",["text","list"]]), ["text","list","text"])
		self.assertEqual(r_insert([1,"into",[2,3]]), [2,3,1])
		
	def test_function_read(self):
		self.assertEqual(r_read(["read_test_file.txt"]), ['http://www.cnn.com', 'http://www.bbc.com', 'http://www.reuters.com', 'http://www.nytimes.com'])

	def test_function_save(self):
		self.assertEqual(r_save([['http://www.cnn.com', 'http://www.bbc.com'], "into", "pre-commit-save.txt"]), True)
		self.assertEqual(r_save(["this is a string", "into", "pre-commit-save.txt"]), True)
		os.remove('pre-commit-save.txt')

	def test_function_append(self):
		self.assertEqual(r_append(['www.puconghan.com','into','pre-commit-save.txt']), True)
		self.assertEqual(r_append([['www.puconghan.com', 'www.rob.com'],'into','pre-commit-save.txt']), True)
		
	def test_function_findurl(self):
		self.assertEqual(r_findurl(['in', ['http://www.bbc.co.uk/news/business-22251756', 'http://www.bbc.co.uk/news/business-22193398'], 'with', 'Boeing', 'and', 'Larry']), ['http://www.bbc.co.uk/news/business-22251756'])
		
	def test_function_findtext(self):
		self.assertEqual(r_findtext(['in', 'www.reuters.com/article/2013/04/25/us-barclays-salz-idusbre93o0op20130425', 'with', 'shareholders', 'and', 'overhaul', 'and', 'not', 'hello']), [u"Chief Executive Antony Jenkins, drafted in last year to tear up Barclays' profits-at-all-costs culture, told shareholders it would take time for them to see the benefits of his multi-billion-pound overhaul."])
		
	
	# Function type checking tests
	def test_function_type_checking(self):
		self.assertEqual(isnumber(1), True)
		self.assertEqual(isnumber("string"), False)
		self.assertEqual(isnumber('url'), False)
		self.assertEqual(isurl('http://www.bbc.com'), True)
		self.assertEqual(isurl('cnn.com'), False)
		self.assertEqual(isurl(5), False)
		self.assertEqual(isurl("text"), False)
		self.assertEqual(istext("text"), True)
		self.assertEqual(istext(1), False)
		self.assertEqual(isnumlist([1,2,3,4,5]), True)
		self.assertEqual(isnumlist(["this", "is", "a", "test"]), False)
		self.assertEqual(isurllist(['http://www.cnn.com', 'http://www.bbc.com']), True)
		self.assertEqual(isurllist(["this", "is", "not"]), False)
		self.assertEqual(istextlist(["this", "is", "a", "test"]), True)
		self.assertEqual(istextlist([1,2,3,4,5]), False)
		
	# Python Generation Tests
	def test_python_print_number(self):
		self.assertEqual(pythonwrapper().buildpython([['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 45]]]]]]]), "tmp0 = 45\ntfl.r_print([tmp0])\n")
	
	def test_python_print_text(self):
		self.assertEqual(pythonwrapper().buildpython([['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['text', "this is text"]]]]]]]), "tmp0 = \'this is text\'\ntfl.r_print([tmp0])\n")
		
	def test_python_print_url(self):
		self.assertEqual(pythonwrapper().buildpython([['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['url', "this is a url"]]]]]]]), "tmp0 = \'this is a url\'\ntfl.r_print([tmp0])\n")
		
		#Length tests
	def test_python_length_list(self):
		self.assertEqual(pythonwrapper().buildpython([['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'length'], 'arguments', [['expression', ['insertword', 'of']], ['expression', ['list', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]], ['expression', ['value', ['number', 6]]]]]]]]]]), "tmp0 = 'of'\ntmp1 = 4\ntmp2 = 5\ntmp3 = 6\ntmp4 = [tmp1,tmp2,tmp3]\ntfl.r_length([tmp0,tmp4])\n")
	

if __name__ == '__main__':
	for f in glob ('*.pyc'):
   		os.unlink(f)
	unittest.main()
