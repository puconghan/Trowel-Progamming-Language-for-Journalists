#! /usr/bin/python

# Git pre-commit hook
#
# Installation instructions:
# Hard link this file to .git/hooks with `cd .git/hooks; ln -s ../../pre-commit pre-commit'

import os, sys, unittest
if os.getcwd().split('/')[-1] == 'hooks':
	os.chdir('../..')
sys.path.append(os.getcwd())
from Parser import parser
import trowel


class TestTrowel(unittest.TestCase):

	def test_parse_print_number(self):
		print 'second test'
		self.assertEqual(parser.parse("print 45"), ('func', 'printvals', [('number', '45')]))

	def test_print_number(self):
		self.assertEqual(trowel.main([None, "print 45"]), ['print "45"'])
		self.assertEqual(trowel.main([None, "print 4 5"]), ['print "45"'])
		self.assertEqual(trowel.main([None, "print 1"]), ['print "1"'])
		
	def test_print_url(self):
		self.assertEqual(trowel.main([None, "print 'www.bbc.co.uk'"]), ['print "www.bbc.co.uk"'])
		self.assertEqual(trowel.main([None, "print 'www.bbc.co.uk' 'www.cnn.com'"]), ['print "www.bbc.co.ukwww.cnn.com"'])
		
	def test_print_text(self):
		self.assertEqual(trowel.main([None, "print \"I am a text object\""]), ['print "I am a text object"'])
		self.assertEqual(trowel.main([None, "print \"I am a text object \" \"I am a second test object\""]), ['print "I am a text object I am a second test object"'])
		
	def test_print_mixedVal(self):
		self.assertEqual(trowel.main([None, "print \"I am a text object \" 45"]), ['print "I am a text object 45"'])
		self.assertEqual(trowel.main([None, "print \"I am a text object \" 'www.bbc.co.uk' \" \" 45"]), ['print "I am a text object www.bbc.co.uk 45"'])
		
	def test_variable_declaration(self):
		self.assertEqual(trowel.main([None, "url temp"]), ["temp = ''"])
		self.assertEqual(trowel.main([None, "number temp"]), ["temp = 0"])
		self.assertEqual(trowel.main([None, "text temp"]), ['temp = ""'])
		
	def test_list_declaration(self):
		self.assertEqual(trowel.main([None, "textlist temp"]), ['temp = []'])
		self.assertEqual(trowel.main([None, "urllist temp"]), ['temp = []'])
		self.assertEqual(trowel.main([None, "numlist temp"]), ['temp = []'])
		
	def test_list_one_line_declaration_and_assignment(self):
		self.assertEqual(trowel.main([None, "urllist temp5 is ['www.cnn.com', 'www.bbc.com']"]), ["temp5 = ['www.cnn.com', 'www.bbc.com']"])
		self.assertEqual(trowel.main([None, "numlist temp5 is [1, 2, 3]"]), ["temp5 = [1, 2, 3]"])
		self.assertEqual(trowel.main([None, 'textlist temp5 is ["this", "is", "a", "list"]']), ["temp5 = ['this', 'is', 'a', 'list']"])
		
	def test_list_one_line_declaration_and_assignment(self):
		self.assertEqual(trowel.main([None, "url temp is 'www.cnn.com'"]), ["temp = 'www.cnn.com'"])
		self.assertEqual(trowel.main([None, "number temp is 10"]), ["temp = 10"])
		self.assertEqual(trowel.main([None, 'text temp is "variable"']), ['temp = "variable"'])

if __name__ == '__main__':
	unittest.main()
