#!/usr/bin/python

import os, unittest

class TestTrowel(unittest.TestCase):

    def test_decassign_program(self):
        os.system("./trowel tests/decassign.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['NUMLIST', 'numlist', 1], ['UNKNOWNWORD', 'x', 1], ['COMMA', ',', 1], ['UNKNOWNWORD', 'j', 1]]\n", "[['NUMBER', 'number', 1], ['UNKNOWNWORD', 'lengthcheck', 1]]\n", "[['NUMLIST', 'numlist', 1], ['UNKNOWNWORD', 'z', 1], ['IS', 'is', 1], ['LEFTSQUAREBRACKET', '[', 1], ['NUMVAL', '6', 1], ['COMMA', ',', 1], ['NUMVAL', '7', 1], ['COMMA', ',', 1], ['NUMVAL', '8', 1], ['COMMA', ',', 1], ['NUMVAL', '9', 1], ['COMMA', ',', 1], ['NUMVAL', '10', 1], ['RIGHTSQUAREBRACKET', ']', 1]]\n", "[['UNKNOWNWORD', 'x', 1], ['IS', 'is', 1], ['LEFTSQUAREBRACKET', '[', 1], ['NUMVAL', '1', 1], ['COMMA', ',', 1], ['NUMVAL', '2', 1], ['COMMA', ',', 1], ['NUMVAL', '3', 1], ['COMMA', ',', 1], ['NUMVAL', '4', 1], ['COMMA', ',', 1], ['NUMVAL', '5', 1], ['RIGHTSQUAREBRACKET', ']', 1]]\n"])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'numlist'], [['x'], ['j']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'number'], [['lengthcheck']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'numlist'], [['z', ['expression', ['list', [['expression', ['value', ['number', 6]]], ['expression', ['value', ['number', 7]]], ['expression', ['value', ['number', 8]]], ['expression', ['value', ['number', 9]]], ['expression', ['value', ['number', 10]]]]]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'x'], ['expression', ['list', [['expression', ['value', ['number', 1]]], ['expression', ['value', ['number', 2]]], ['expression', ['value', ['number', 3]]], ['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 5]]]]]]]]\n"])
        f = open('tests/decassign.py')
        python = f.readlines()
        self.assertEqual(python[5:], ['j = ""\n', 'lengthcheck = 0\n', 'z = ""\n', 'tmp0 = 6\n', 'tmp1 = 7\n', 'tmp2 = 8\n', 'tmp3 = 9\n', 'tmp4 = 10\n', 'z = [tmp0,tmp1,tmp2,tmp3,tmp4]\n', 'tmp0 = 1\n', 'tmp1 = 2\n', 'tmp2 = 3\n', 'tmp3 = 4\n', 'tmp4 = 5\n', 'x = [tmp0,tmp1,tmp2,tmp3,tmp4]\n'])
        f.close()

    def test_print_program(self):
        os.system("./trowel tests/print.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['UNKNOWNWORD', 'print', 1], ['NUMVAL', '45', 1]]\n"])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['number', 45]]]]]]]\n"])
        f = open('tests/print.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['tmp0 = 45\n', 'tfl.r_print([tmp0])\n'])
        f.close()

    def test_addcombine_program(self):
        os.system("./trowel tests/addcombine.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['URL', 'url', 1], ['UNKNOWNWORD', 'x', 1]]\n", "[['NUMBER', 'number', 1], ['UNKNOWNWORD', 'y', 1], ['IS', 'is', 1], ['NUMVAL', '5', 1]]\n", '[[\'UNKNOWNWORD\', \'x\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'combine\', 1], [\'URLVAL\', "\'www.bbc.co.uk?\'", 1], [\'UNKNOWNWORD\', \'with\', 1], [\'LEFTPAREN\', \'(\', 1], [\'UNKNOWNWORD\', \'y\', 1], [\'PLUS\', \'+\', 1], [\'NUMVAL\', \'2\', 1], [\'RIGHTPAREN\', \')\', 1]]\n', '[[\'UNKNOWNWORD\', \'save\', 1], [\'UNKNOWNWORD\', \'x\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'url'], [['x']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'number'], [['y', ['expression', ['value', ['number', 5]]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'x'], ['expression', ['functioncall', ['functionname', 'combine'], 'arguments', [['expression', ['value', ['url', 'www.bbc.co.uk?']]], ['expression', ['insertword', 'with']], ['expression', ['functioncall', ['functionname', 'plus'], 'arguments', [['expression', ['variable', 'y']], ['expression', ['value', ['number', 2]]]]]]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['variable', 'x']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'output.txt']]]]]]]\n"])
        f = open('tests/addcombine.py')
        python = f.readlines()
        self.assertEqual(python[5:], ['y = 0\n', 'y = 5\n', "tmp0 = 'www.bbc.co.uk?'\n", "tmp1 = 'with'\n", 'tmp2 = y\n', 'tmp3 = 2\n', 'tfl.r_plus([tmp2,tmp3])\n', 'tmp4 = tfl.r_plus([tmp2,tmp3])\n', 'tfl.r_combine([tmp0,tmp1,tmp4])\n', 'x = tfl.r_combine([tmp0,tmp1,tmp4])\n', 'tmp0 = x\n', "tmp1 = 'into'\n", "tmp2 = 'output.txt'\n", 'tfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()

    def test_helloWorld_program(self):
        os.system("./trowel tests/hello.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'hellocontents', 1]]\n", '[[\'URL\', \'url\', 1], [\'UNKNOWNWORD\', \'hello\', 1], [\'IS\', \'is\', 1], [\'URLVAL\', "\'www.journotrowel.com/examples/hello.html\'", 1]]\n', "[['UNKNOWNWORD', 'hellocontents', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findtext', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'hello', 1]]\n", "[['UNKNOWNWORD', 'print', 1], ['UNKNOWNWORD', 'hellocontents', 1]]\n", '[[\'UNKNOWNWORD\', \'save\', 1], [\'UNKNOWNWORD\', \'hellocontents\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['hellocontents']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'url'], [['hello', ['expression', ['value', ['url', 'www.journotrowel.com/examples/hello.html']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'hellocontents'], ['expression', ['functioncall', ['functionname', 'findtext'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'hello']]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['variable', 'hellocontents']]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['variable', 'hellocontents']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'output.txt']]]]]]]\n"])
        f = open('tests/hello.py')
        python = f.readlines()
        self.assertEqual(python[5:], ['hello = ""\n', "hello = 'www.journotrowel.com/examples/hello.html'\n", "tmp0 = 'in'\n", 'tmp1 = hello\n', 'tfl.r_findtext([tmp0,tmp1])\n', 'hellocontents = tfl.r_findtext([tmp0,tmp1])\n', 'tmp0 = hellocontents\n', 'tfl.r_print([tmp0])\n', 'tmp0 = hellocontents\n', "tmp1 = 'into'\n", "tmp2 = 'output.txt'\n", 'tfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()

    def test_flighttime_program(self):
        os.system("./trowel tests/flightTime.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'flighttime', 1]]\n", '[[\'URL\', \'url\', 1], [\'UNKNOWNWORD\', \'spacearticle\', 1], [\'IS\', \'is\', 1], [\'URLVAL\', "\'http://journotrowel.com/examples/science-environment-22344398.html\'", 1]]\n', '[[\'UNKNOWNWORD\', \'flighttime\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'findtext\', 1], [\'UNKNOWNWORD\', \'in\', 1], [\'UNKNOWNWORD\', \'spacearticle\', 1], [\'UNKNOWNWORD\', \'with\', 1], [\'TEXTVAL\', \'"time"\', 1], [\'AND\', \'and\', 1], [\'TEXTVAL\', \'"flight"\', 1]]\n', '[[\'UNKNOWNWORD\', \'save\', 1], [\'UNKNOWNWORD\', \'flighttime\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['flighttime']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'url'], [['spacearticle', ['expression', ['value', ['url', 'http://journotrowel.com/examples/science-environment-22344398.html']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'flighttime'], ['expression', ['functioncall', ['functionname', 'findtext'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'spacearticle']], ['expression', ['insertword', 'with']], ['expression', ['value', ['text', 'time']]], ['expression', ['insertword', 'and']], ['expression', ['value', ['text', 'flight']]]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['variable', 'flighttime']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'output.txt']]]]]]]\n"])
        f = open('tests/flighttime.py')
        python = f.readlines()
        self.assertEqual(python[5:], ['spacearticle = ""\n', "spacearticle = 'http://journotrowel.com/examples/science-environment-22344398.html'\n", "tmp0 = 'in'\n", 'tmp1 = spacearticle\n', "tmp2 = 'with'\n", "tmp3 = 'time'\n", "tmp4 = 'and'\n", "tmp5 = 'flight'\n", 'tfl.r_findtext([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'flighttime = tfl.r_findtext([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'tmp0 = flighttime\n', "tmp1 = 'into'\n", "tmp2 = 'output.txt'\n", 'tfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()
        
    def test_if_program(self):
        os.system("./trowel tests/if.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'hello', 1]]\n", "[['IF', 'if', 1], ['NUMVAL', '4', 1], ['GREATER', '>', 1], ['NUMVAL', '3', 1], ['COLON', ':', 1]]\n", '[[\'UNKNOWNWORD\', \'print\', 1], [\'TEXTVAL\', \'"boomshakalaka"\', 1]]\n', '[[\'UNKNOWNWORD\', \'save\', 1], [\'TEXTVAL\', \'"boomshakalaka"\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['hello']]]]\n", "[['indentlevel', 1], ['conditional', ['control', 'if'], ['boolean_list', [[['expression', ['functioncall', ['functionname', 'greater'], 'arguments', [['expression', ['value', ['number', 4]]], ['expression', ['value', ['number', 3]]]]]]]]]]]\n", "[['indentlevel', 1], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['value', ['text', 'boomshakalaka']]]]]]]\n", "[['indentlevel', 1], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['value', ['text', 'boomshakalaka']]], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'output.txt']]]]]]]\n"])
        f = open('tests/if.py')
        python = f.readlines()
        self.assertEqual(python[5:], ['tmp0 = 4\n', 'tmp1 = 3\n', 'tfl.r_greater([tmp0,tmp1])\n', 'if tfl.r_greater([tmp0,tmp1]):\n', "\ttmp0 = 'boomshakalaka'\n", '\ttfl.r_print([tmp0])\n', "\ttmp0 = 'boomshakalaka'\n", "\ttmp1 = 'into'\n", "\ttmp2 = 'output.txt'\n", '\ttfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()
        
        
    ## Example programs
    #Example 1
    def test_example1_program(self):
        os.system("./trowel example_source_programs/example_program1.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'hellocontents', 1]]\n", '[[\'URL\', \'url\', 1], [\'UNKNOWNWORD\', \'hello\', 1], [\'IS\', \'is\', 1], [\'URLVAL\', "\'http://pythonweb.org/projects/webmodules/doc/0.5.3/html_multipage/web/node20.html\'", 1]]\n', "[['UNKNOWNWORD', 'hellocontents', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findtext', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'hello', 1]]\n", "[['UNKNOWNWORD', 'print', 1], ['UNKNOWNWORD', 'hellocontents', 1]]\n"])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['hellocontents']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'url'], [['hello', ['expression', ['value', ['url', 'http://pythonweb.org/projects/webmodules/doc/0.5.3/html_multipage/web/node20.html']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'hellocontents'], ['expression', ['functioncall', ['functionname', 'findtext'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'hello']]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['variable', 'hellocontents']]]]]]\n"])
        f = open('example_source_programs/example_program1.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['hellocontents = ""\n', 'hello = ""\n', "hello = 'http://pythonweb.org/projects/webmodules/doc/0.5.3/html_multipage/web/node20.html'\n", "tmp0 = 'in'\n", 'tmp1 = hello\n', 'tfl.r_findtext([tmp0,tmp1])\n', 'hellocontents = tfl.r_findtext([tmp0,tmp1])\n', 'tmp0 = hellocontents\n', 'tfl.r_print([tmp0])\n'])
        f.close()
        
    def test_example2_program(self):
        os.system("./trowel example_source_programs/example_program2.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ['[[\'URLLIST\', \'urllist\', 1], [\'UNKNOWNWORD\', \'stories\', 1], [\'IS\', \'is\', 1], [\'LEFTSQUAREBRACKET\', \'[\', 1], [\'URLVAL\', "\'http://www.bbc.co.uk/news/business-21857393\'", 1], [\'COMMA\', \',\', 1], [\'URLVAL\', "\'http://www.bbc.co.uk/news/uk-northern-ireland-21855357\'", 1], [\'RIGHTSQUAREBRACKET\', \']\', 1], [\'COMMA\', \',\', 1], [\'UNKNOWNWORD\', \'filteredresult\', 1]]\n', '[[\'TEXT\', \'text\', 1], [\'UNKNOWNWORD\', \'term1\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"obama"\', 1], [\'COMMA\', \',\', 1], [\'UNKNOWNWORD\', \'term2\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"ireland"\', 1]]\n', "[['UNKNOWNWORD', 'filteredresult', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findurl', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'stories', 1], ['UNKNOWNWORD', 'with', 1], ['UNKNOWNWORD', 'term1', 1], ['AND', 'and', 1], ['UNKNOWNWORD', 'term2', 1]]\n", "[['UNKNOWNWORD', 'print', 1], ['UNKNOWNWORD', 'filteredresult', 1]]\n"])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'urllist'], [['stories', ['expression', ['list', [['expression', ['value', ['url', 'http://www.bbc.co.uk/news/business-21857393']]], ['expression', ['value', ['url', 'http://www.bbc.co.uk/news/uk-northern-ireland-21855357']]]]]]], ['filteredresult']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'text'], [['term1', ['expression', ['value', ['text', 'obama']]]], ['term2', ['expression', ['value', ['text', 'ireland']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'filteredresult'], ['expression', ['functioncall', ['functionname', 'findurl'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'stories']], ['expression', ['insertword', 'with']], ['expression', ['variable', 'term1']], ['expression', ['insertword', 'and']], ['expression', ['variable', 'term2']]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'print'], 'arguments', [['expression', ['variable', 'filteredresult']]]]]]\n"])
        f = open('example_source_programs/example_program2.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['stories = ""\n', "tmp0 = 'http://www.bbc.co.uk/news/business-21857393'\n", "tmp1 = 'http://www.bbc.co.uk/news/uk-northern-ireland-21855357'\n", 'stories = [tmp0,tmp1]\n', 'filteredresult = ""\n', 'term1 = ""\n', "term1 = 'obama'\n", 'term2 = ""\n', "term2 = 'ireland'\n", "tmp0 = 'in'\n", 'tmp1 = stories\n', "tmp2 = 'with'\n", 'tmp3 = term1\n', "tmp4 = 'and'\n", 'tmp5 = term2\n', 'tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'filteredresult = tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'tmp0 = filteredresult\n', 'tfl.r_print([tmp0])\n'])
        f.close()
        
    def test_example3_program(self):
        os.system("./trowel example_source_programs/example_program3.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['URLLIST', 'urllist', 1], ['UNKNOWNWORD', 'stories', 1], ['COMMA', ',', 1], ['UNKNOWNWORD', 'filteredresult', 1]]\n", '[[\'TEXT\', \'text\', 1], [\'UNKNOWNWORD\', \'term1\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"obama"\', 1], [\'COMMA\', \',\', 1], [\'UNKNOWNWORD\', \'term2\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"ireland"\', 1]]\n', '[[\'UNKNOWNWORD\', \'stories\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'read\', 1], [\'TEXTVAL\', \'"example_source_programs/example3.txt"\', 1]]\n', "[['UNKNOWNWORD', 'filteredresult', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findurl', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'stories', 1], ['UNKNOWNWORD', 'with', 1], ['UNKNOWNWORD', 'term1', 1], ['AND', 'and', 1], ['UNKNOWNWORD', 'term2', 1]]\n", '[[\'UNKNOWNWORD\', \'save\', 1], [\'UNKNOWNWORD\', \'filteredresult\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"example_source_programs/example3_output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'urllist'], [['stories'], ['filteredresult']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'text'], [['term1', ['expression', ['value', ['text', 'obama']]]], ['term2', ['expression', ['value', ['text', 'ireland']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'stories'], ['expression', ['functioncall', ['functionname', 'read'], 'arguments', [['expression', ['value', ['text', 'example_source_programs/example3.txt']]]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'filteredresult'], ['expression', ['functioncall', ['functionname', 'findurl'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'stories']], ['expression', ['insertword', 'with']], ['expression', ['variable', 'term1']], ['expression', ['insertword', 'and']], ['expression', ['variable', 'term2']]]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['variable', 'filteredresult']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'example_source_programs/example3_output.txt']]]]]]]\n"])
        f = open('example_source_programs/example_program3.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['stories = ""\n', 'filteredresult = ""\n', 'term1 = ""\n', "term1 = 'obama'\n", 'term2 = ""\n', "term2 = 'ireland'\n", "tmp0 = 'example_source_programs/example3.txt'\n", 'tfl.r_read([tmp0])\n', 'stories = tfl.r_read([tmp0])\n', "tmp0 = 'in'\n", 'tmp1 = stories\n', "tmp2 = 'with'\n", 'tmp3 = term1\n', "tmp4 = 'and'\n", 'tmp5 = term2\n', 'tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'filteredresult = tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5])\n', 'tmp0 = filteredresult\n', "tmp1 = 'into'\n", "tmp2 = 'example_source_programs/example3_output.txt'\n", 'tfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()
        
    def test_example4_program(self):
        os.system("./trowel example_source_programs/example_program4.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ['[[\'URLLIST\', \'urllist\', 1], [\'UNKNOWNWORD\', \'stories\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'read\', 1], [\'TEXTVAL\', \'"example_source_programs/election.txt"\', 1]]\n', '[[\'TEXT\', \'text\', 1], [\'UNKNOWNWORD\', \'term1\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"obama"\', 1], [\'COMMA\', \',\', 1], [\'UNKNOWNWORD\', \'term2\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"romney"\', 1]]\n', "[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'filteredresult', 1]]\n", "[['FOR', 'for', 1], ['UNKNOWNWORD', 'storyitem', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'stories', 1], ['COLON', ':', 1]]\n", "[['UNKNOWNWORD', 'filteredresult', 1], ['IS', 'is', 1], ['UNKNOWNWORD', 'findtext', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'storyitem', 1], ['UNKNOWNWORD', 'with', 1], ['UNKNOWNWORD', 'term1', 1]]\n", "[['IF', 'if', 1], ['UNKNOWNWORD', 'filteredresult', 1], ['COLON', ':', 1]]\n", '[[\'UNKNOWNWORD\', \'append\', 1], [\'UNKNOWNWORD\', \'storyitem\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"example_source_programs/example4_output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'urllist'], [['stories', ['expression', ['functioncall', ['functionname', 'read'], 'arguments', [['expression', ['value', ['text', 'example_source_programs/election.txt']]]]]]]]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'text'], [['term1', ['expression', ['value', ['text', 'obama']]]], ['term2', ['expression', ['value', ['text', 'romney']]]]]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['filteredresult']]]]\n", "[['indentlevel', 1], ['forstatement', ['variable', 'storyitem'], ['expression', ['variable', 'stories']]]]\n", "[['indentlevel', 1], ['assignment', ['variable', 'filteredresult'], ['expression', ['functioncall', ['functionname', 'findtext'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'storyitem']], ['expression', ['insertword', 'with']], ['expression', ['variable', 'term1']]]]]]]\n", "[['indentlevel', 2], ['conditional', ['control', 'if'], ['boolean_list', [[['expression', ['variable', 'filteredresult']]]]]]]\n", "[['indentlevel', 2], ['expression', ['functioncall', ['functionname', 'append'], 'arguments', [['expression', ['variable', 'storyitem']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'example_source_programs/example4_output.txt']]]]]]]\n"])
        f = open('example_source_programs/example_program4.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['stories = ""\n', "tmp0 = 'example_source_programs/election.txt'\n", 'tfl.r_read([tmp0])\n', 'stories = tfl.r_read([tmp0])\n', 'term1 = ""\n', "term1 = 'obama'\n", 'term2 = ""\n', "term2 = 'romney'\n", 'filteredresult = ""\n', 'for storyitem in stories:\n', "\ttmp0 = 'in'\n", '\ttmp1 = storyitem\n', "\ttmp2 = 'with'\n", '\ttmp3 = term1\n', '\ttfl.r_findtext([tmp0,tmp1,tmp2,tmp3])\n', '\tfilteredresult = tfl.r_findtext([tmp0,tmp1,tmp2,tmp3])\n', '\tif filteredresult:\n', '\t\ttmp0 = storyitem\n', "\t\ttmp1 = 'into'\n", "\t\ttmp2 = 'example_source_programs/example4_output.txt'\n", '\t\ttfl.r_append([tmp0,tmp1,tmp2])\n'])
        f.close()
        
    def test_example5_program(self):
        os.system("./trowel example_source_programs/example_program5.twl")
        k = open("tokens.twl")
        tokens = k.readlines()
        self.assertEqual(tokens, ["[['URLLIST', 'urllist', 1], ['UNKNOWNWORD', 'stories', 1], ['COMMA', ',', 1], ['UNKNOWNWORD', 'filteredresult', 1]]\n", "[['TEXTLIST', 'textlist', 1], ['UNKNOWNWORD', 'obamat', 1]]\n", '[[\'TEXT\', \'text\', 1], [\'UNKNOWNWORD\', \'term1\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"obama"\', 1], [\'COMMA\', \',\', 1], [\'UNKNOWNWORD\', \'term2\', 1], [\'IS\', \'is\', 1], [\'TEXTVAL\', \'"ireland"\', 1]]\n', '[[\'UNKNOWNWORD\', \'stories\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'read\', 1], [\'TEXTVAL\', \'"example_source_programs/example3.txt"\', 1]]\n', '[[\'UNKNOWNWORD\', \'filteredresult\', 1], [\'IS\', \'is\', 1], [\'UNKNOWNWORD\', \'findurl\', 1], [\'UNKNOWNWORD\', \'in\', 1], [\'UNKNOWNWORD\', \'stories\', 1], [\'UNKNOWNWORD\', \'with\', 1], [\'UNKNOWNWORD\', \'term1\', 1], [\'AND\', \'and\', 1], [\'UNKNOWNWORD\', \'term2\', 1], [\'OR\', \'or\', 1], [\'TEXTVAL\', \'"barack"\', 1]]\n', "[['IF', 'if', 1], ['LEFTPAREN', '(', 1], ['UNKNOWNWORD', 'length', 1], ['UNKNOWNWORD', 'of', 1], ['UNKNOWNWORD', 'filteredresult', 1], ['RIGHTPAREN', ')', 1], ['GREATER', '>', 1], ['NUMVAL', '10', 1], ['COLON', ':', 1]]\n", "[['FOR', 'for', 1], ['UNKNOWNWORD', 'entry', 1], ['UNKNOWNWORD', 'in', 1], ['UNKNOWNWORD', 'filteredresult', 1], ['COLON', ':', 1]]\n", '[[\'UNKNOWNWORD\', \'insert\', 1], [\'LEFTPAREN\', \'(\', 1], [\'UNKNOWNWORD\', \'findtext\', 1], [\'UNKNOWNWORD\', \'in\', 1], [\'UNKNOWNWORD\', \'entry\', 1], [\'UNKNOWNWORD\', \'with\', 1], [\'TEXTVAL\', \'"obama said"\', 1], [\'RIGHTPAREN\', \')\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'UNKNOWNWORD\', \'obamat\', 1]]\n', '[[\'UNKNOWNWORD\', \'save\', 1], [\'UNKNOWNWORD\', \'obamat\', 1], [\'UNKNOWNWORD\', \'into\', 1], [\'TEXTVAL\', \'"example_source_programs/example5_output.txt"\', 1]]\n'])
        k.close()
        a = open("asl.twl")
        asl = a.readlines()
        a.close()
        self.assertEqual(asl, ["[['indentlevel', 0], ['declaration', ['datatype', 'urllist'], [['stories'], ['filteredresult']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'textlist'], [['obamat']]]]\n", "[['indentlevel', 0], ['declaration', ['datatype', 'text'], [['term1', ['expression', ['value', ['text', 'obama']]]], ['term2', ['expression', ['value', ['text', 'ireland']]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'stories'], ['expression', ['functioncall', ['functionname', 'read'], 'arguments', [['expression', ['value', ['text', 'example_source_programs/example3.txt']]]]]]]]\n", "[['indentlevel', 0], ['assignment', ['variable', 'filteredresult'], ['expression', ['functioncall', ['functionname', 'findurl'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'stories']], ['expression', ['insertword', 'with']], ['expression', ['variable', 'term1']], ['expression', ['insertword', 'and']], ['expression', ['variable', 'term2']], ['expression', ['insertword', 'or']], ['expression', ['value', ['text', 'barack']]]]]]]]\n", "[['indentlevel', 1], ['conditional', ['control', 'if'], ['boolean_list', [[['expression', ['functioncall', ['functionname', 'greater'], 'arguments', [['expression', ['functioncall', ['functionname', 'length'], 'arguments', [['expression', ['insertword', 'of']], ['expression', ['variable', 'filteredresult']]]]], ['expression', ['value', ['number', 10]]]]]]]]]]]\n", "[['indentlevel', 2], ['forstatement', ['variable', 'entry'], ['expression', ['variable', 'filteredresult']]]]\n", "[['indentlevel', 2], ['expression', ['functioncall', ['functionname', 'insert'], 'arguments', [['expression', ['functioncall', ['functionname', 'findtext'], 'arguments', [['expression', ['insertword', 'in']], ['expression', ['variable', 'entry']], ['expression', ['insertword', 'with']], ['expression', ['value', ['text', 'obama said']]]]]], ['expression', ['insertword', 'into']], ['expression', ['variable', 'obamat']]]]]]\n", "[['indentlevel', 0], ['expression', ['functioncall', ['functionname', 'save'], 'arguments', [['expression', ['variable', 'obamat']], ['expression', ['insertword', 'into']], ['expression', ['value', ['text', 'example_source_programs/example5_output.txt']]]]]]]\n"])
        f = open('example_source_programs/example_program5.py')
        python = f.readlines()
        self.assertEqual(python[4:], ['stories = ""\n', 'filteredresult = ""\n', 'obamat = ""\n', 'term1 = ""\n', "term1 = 'obama'\n", 'term2 = ""\n', "term2 = 'ireland'\n", "tmp0 = 'example_source_programs/example3.txt'\n", 'tfl.r_read([tmp0])\n', 'stories = tfl.r_read([tmp0])\n', "tmp0 = 'in'\n", 'tmp1 = stories\n', "tmp2 = 'with'\n", 'tmp3 = term1\n', "tmp4 = 'and'\n", 'tmp5 = term2\n', "tmp6 = 'or'\n", "tmp7 = 'barack'\n", 'tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7])\n', 'filteredresult = tfl.r_findurl([tmp0,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7])\n', "tmp0 = 'of'\n", 'tmp1 = filteredresult\n', 'tfl.r_length([tmp0,tmp1])\n', 'tmp2 = tfl.r_length([tmp0,tmp1])\n', 'tmp3 = 10\n', 'tfl.r_greater([tmp2,tmp3])\n', 'if tfl.r_greater([tmp2,tmp3]):\n', '\tfor entry in filteredresult:\n', "\t\ttmp0 = 'in'\n", '\t\ttmp1 = entry\n', "\t\ttmp2 = 'with'\n", "\t\ttmp3 = 'obama said'\n", '\t\ttfl.r_findtext([tmp0,tmp1,tmp2,tmp3])\n', '\t\ttmp4 = tfl.r_findtext([tmp0,tmp1,tmp2,tmp3])\n', "\t\ttmp5 = 'into'\n", '\t\ttmp6 = obamat\n', '\t\ttfl.r_insert([tmp4,tmp5,tmp6])\n', 'tmp0 = obamat\n', "tmp1 = 'into'\n", "tmp2 = 'example_source_programs/example5_output.txt'\n", 'tfl.r_save([tmp0,tmp1,tmp2])\n'])
        f.close()
    
        
if __name__ == '__main__':
    unittest.main()
